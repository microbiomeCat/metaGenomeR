getwd()
devtools::document()
install.packages("usethis", "devtools", "roxygen2")
install.packages( "devtools")
install.packages("usethis")
install.packages("roxygen2")
devtools::load_all()
devtools::document()
usethis::use_mit_license()
usethis::use_package("data.table", type = "Depends", min_version = NULL)
usethis::use_package("data.table", type = "Imports", min_version = NULL)
usethis::use_package("data.table", type = "Imports", min_version = NULL)
usethis::use_package("data.table", type = "Imports", min_version = NULL)
usethis::use_package("stringr", type = "Imports", min_version = NULL)
usethis::use_package("tidyfst", type = "Imports", min_version = NULL)
devtools::check()
devtools::check()
library(metaGenomeR)
func_dir <- "4_gene"
abd_dir <- "2.6_gene_abundance"
devtools::document()
warnings()
warnings()
devtools::document()
devtools::document()
devtools::document()
library(vegan)
install.packages("vegan")
library(vegan)
?diversity()
lirbary(phlyoseq)
library(phlyoseq)
library(phyloseq)
library(phyloseq)
install.packages("phyloseq")
install.packages(pacman)
install.packages("pacman")
pacman("phyloseq")
pacman::p_install("phyloseq")
#pacman::p_("phyloseq")
install.packages('BiocManager')
install.packages("pROC")
library(pROC)
library(pROC)
data(aSAH)
roc1 <- roc(aSAH$outcome, aSAH$s100b)
print(roc1)''
roc1 <- roc(aSAH$outcome, aSAH$s100b)
print(roc1)
roc4 <- roc(aSAH$outcome,aSAH$s100b,
percent=TRUE,
#percent敏感性、特异性和AUC是否必须用百分数或分数表示
partial.auc=c(100, 90),
#计算部分auc
partial.auc.correct=TRUE,
#是否对AUC校正，以获得最大AUC为1.0和非歧视性AUC 0.5，
partial.auc.focus="sens",
#计算partial.auc根据"sens"，即敏感性
ci=TRUE, boot.n=100,
#ci置信区间，boot.n是bootstrap重复数
ci.alpha=0.9, stratified=FALSE,
#stratified表示bootstrap是否分层
# arguments for plot
plot=TRUE, auc.polygon=TRUE,
#auc.polygon是否将area显示为多边形
max.auc.polygon=TRUE, grid=TRUE,
#max.auc.polygon是否将最大可能的区域显示为多边形
#grid是否添加背景网格
print.auc=TRUE, show.thres=TRUE
#print.auc，AUC的数值是否应该打印在图上
)
?roc
roc(aSAH$outcome, aSAH$s100b, percent=TRUE)
roc4 <- roc(aSAH$outcome,aSAH$s100b,
percent=F,
#percent敏感性、特异性和AUC是否必须用百分数或分数表示
partial.auc=c(100, 90),
#计算部分auc
partial.auc.correct=TRUE,
#是否对AUC校正，以获得最大AUC为1.0和非歧视性AUC 0.5，
partial.auc.focus="sens",
#计算partial.auc根据"sens"，即敏感性
ci=TRUE, boot.n=100,
#ci置信区间，boot.n是bootstrap重复数
ci.alpha=0.9, stratified=FALSE,
#stratified表示bootstrap是否分层
# arguments for plot
plot=TRUE, auc.polygon=TRUE,
#auc.polygon是否将area显示为多边形
max.auc.polygon=TRUE, grid=TRUE,
#max.auc.polygon是否将最大可能的区域显示为多边形
#grid是否添加背景网格
print.auc=TRUE, show.thres=TRUE
#print.auc，AUC的数值是否应该打印在图上
)
roc4 <- roc(aSAH$outcome,aSAH$s100b,
percent=False,
#percent敏感性、特异性和AUC是否必须用百分数或分数表示
partial.auc=c(100, 90),
#计算部分auc
partial.auc.correct=TRUE,
#是否对AUC校正，以获得最大AUC为1.0和非歧视性AUC 0.5，
partial.auc.focus="sens",
#计算partial.auc根据"sens"，即敏感性
ci=TRUE, boot.n=100,
#ci置信区间，boot.n是bootstrap重复数
ci.alpha=0.9, stratified=FALSE,
#stratified表示bootstrap是否分层
# arguments for plot
plot=TRUE, auc.polygon=TRUE,
#auc.polygon是否将area显示为多边形
max.auc.polygon=TRUE, grid=TRUE,
#max.auc.polygon是否将最大可能的区域显示为多边形
#grid是否添加背景网格
print.auc=TRUE, show.thres=TRUE
#print.auc，AUC的数值是否应该打印在图上
)
roc4 <- roc(aSAH$outcome,aSAH$s100b,
percent=TRUE,
#percent敏感性、特异性和AUC是否必须用百分数或分数表示
partial.auc=c(100, 90),
#计算部分auc
partial.auc.correct=TRUE,
#是否对AUC校正，以获得最大AUC为1.0和非歧视性AUC 0.5，
partial.auc.focus="sens",
#计算partial.auc根据"sens"，即敏感性
ci=TRUE, boot.n=100,
#ci置信区间，boot.n是bootstrap重复数
ci.alpha=0.9, stratified=FALSE,
#stratified表示bootstrap是否分层
# arguments for plot
plot=TRUE, auc.polygon=TRUE,
#auc.polygon是否将area显示为多边形
max.auc.polygon=TRUE, grid=TRUE,
#max.auc.polygon是否将最大可能的区域显示为多边形
#grid是否添加背景网格
print.auc=TRUE, show.thres=TRUE
#print.auc，AUC的数值是否应该打印在图上
)
roc4 <- roc(aSAH$outcome,aSAH$s100b,
#percent=TRUE,
#percent敏感性、特异性和AUC是否必须用百分数或分数表示
partial.auc=c(100, 90),
#计算部分auc
partial.auc.correct=TRUE,
#是否对AUC校正，以获得最大AUC为1.0和非歧视性AUC 0.5，
partial.auc.focus="sens",
#计算partial.auc根据"sens"，即敏感性
ci=TRUE, boot.n=100,
#ci置信区间，boot.n是bootstrap重复数
ci.alpha=0.9, stratified=FALSE,
#stratified表示bootstrap是否分层
# arguments for plot
plot=TRUE, auc.polygon=TRUE,
#auc.polygon是否将area显示为多边形
max.auc.polygon=TRUE, grid=TRUE,
#max.auc.polygon是否将最大可能的区域显示为多边形
#grid是否添加背景网格
print.auc=TRUE, show.thres=TRUE
#print.auc，AUC的数值是否应该打印在图上
)
roc4 <- roc(aSAH$outcome,aSAH$s100b,
percent=FALSE,
#percent敏感性、特异性和AUC是否必须用百分数或分数表示
partial.auc=c(100, 90),
#计算部分auc
partial.auc.correct=TRUE,
#是否对AUC校正，以获得最大AUC为1.0和非歧视性AUC 0.5，
partial.auc.focus="sens",
#计算partial.auc根据"sens"，即敏感性
ci=TRUE, boot.n=100,
#ci置信区间，boot.n是bootstrap重复数
ci.alpha=0.9, stratified=FALSE,
#stratified表示bootstrap是否分层
# arguments for plot
plot=TRUE, auc.polygon=TRUE,
#auc.polygon是否将area显示为多边形
max.auc.polygon=TRUE, grid=TRUE,
#max.auc.polygon是否将最大可能的区域显示为多边形
#grid是否添加背景网格
print.auc=TRUE, show.thres=TRUE
#print.auc，AUC的数值是否应该打印在图上
)
roc4 <- roc(aSAH$outcome,aSAH$s100b,
percent=FALSE,
#percent敏感性、特异性和AUC是否必须用百分数或分数表示
#partial.auc=c(100, 90),
#计算部分auc
#partial.auc.correct=TRUE,
#是否对AUC校正，以获得最大AUC为1.0和非歧视性AUC 0.5，
#partial.auc.focus="sens",
#计算partial.auc根据"sens"，即敏感性
ci=TRUE, boot.n=100,
#ci置信区间，boot.n是bootstrap重复数
ci.alpha=0.9, stratified=FALSE,
#stratified表示bootstrap是否分层
# arguments for plot
plot=TRUE, auc.polygon=TRUE,
#auc.polygon是否将area显示为多边形
max.auc.polygon=TRUE, grid=TRUE,
#max.auc.polygon是否将最大可能的区域显示为多边形
#grid是否添加背景网格
print.auc=TRUE, show.thres=TRUE
#print.auc，AUC的数值是否应该打印在图上
)
roc4 <- roc(aSAH$outcome,aSAH$s100b,
percent=TRUE,
#percent敏感性、特异性和AUC是否必须用百分数或分数表示
#partial.auc=c(100, 90),
#计算部分auc
#partial.auc.correct=TRUE,
#是否对AUC校正，以获得最大AUC为1.0和非歧视性AUC 0.5，
#partial.auc.focus="sens",
#计算partial.auc根据"sens"，即敏感性
ci=TRUE, boot.n=100,
#ci置信区间，boot.n是bootstrap重复数
ci.alpha=0.9, stratified=FALSE,
#stratified表示bootstrap是否分层
# arguments for plot
plot=TRUE, auc.polygon=TRUE,
#auc.polygon是否将area显示为多边形
max.auc.polygon=TRUE, grid=TRUE,
#max.auc.polygon是否将最大可能的区域显示为多边形
#grid是否添加背景网格
print.auc=TRUE, show.thres=TRUE
#print.auc，AUC的数值是否应该打印在图上
)
?pROC::multiclass.roc
multiclass.roc(aSAH$gos6, aSAH$s100b, percent=TRUE)
multiclass.roc(aSAH$gos6, aSAH$s100b, levels=c(3, 4, 5))
plot(multiclass.roc(aSAH$gos6, aSAH$s100b, levels=c(3, 4, 5)))
a=(multiclass.roc(aSAH$gos6, aSAH$s100b, levels=c(3, 4, 5)))
a
plot(a)
plot.roc(a)
